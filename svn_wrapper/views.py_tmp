#! /usr/bin/env python
# -*- coding: utf-8 -*-
"""
Copyright(C) 2016
Environment:python 2.7.10
Package: Django 1.8.4
@version: $ 
@author: RoyFu{<mailto:royfu77@sina.com>}
@license: Apache Licence 
@file: views.py
@CreateTime: 16/8/15 下午4:01
@ModifyTime: 16/8/15 下午4:01
"""


from django.conf import settings as DJ_SETTINGs
from django.shortcuts import render
from django.http import HttpRequest, HttpResponse
from django.shortcuts import render_to_response, render
from django.contrib.auth.decorators import login_required
import json
import os, time
import logging
from django.core import serializers
import pysvn

logger = logging.getLogger('django')
TRUNK_BASE = 'svn://192.168.1.204/trunk/'
BRANCH_BASE = 'svn://192.168.1.204/branches/'
SVN_BASE = 'svn://192.168.1.204/'

def callback_get_log_message():
    return True, ''

@login_required(login_url="/account/login/")
def get_projects(request):
    client = pysvn.Client()

    fs = client.list(TRUNK_BASE)
    if fs is None or len(fs) == 0:
        return HttpResponse(json.dumps({'ret':1, 'msg':'no projects'}))

    projects = []
    for (f,t) in fs:
        if str(f.kind) == 'dir':
            name = f.path.split('/')[-1]
            if name == 'trunk':
                continue
            projects.append(name)

    if len(projects)  == 0:
        return HttpResponse(json.dumps({'ret':2, 'msg':'no projects'}))


    return HttpResponse(json.dumps({'ret':0, 'projects':projects}))
    #return HttpResponse(json.dumps({'ret':1, 'projects':projects}))

@login_required(login_url="/account/login/")
def get_projects(request):
    pass

@login_required(login_url="/account/login/")
def branch_create(request):
    bn = request.GET.get('branch_name')
    pn = request.GET.get('project_name')

    # check param valid
    if bn is None or bn.strip() == '':
        return HttpResponse(json.dumps({'ret':1, 'msg':'分支名称不合法'}))
    bn = bn.strip()

    if pn is None or pn.strip() == '':
        return HttpResponse(json.dumps({'ret':2, 'msg':'项目不合法'}))
    pn = pn.strip()

    # check project exit in svn
    client = pysvn.Client()
    client.callback_get_log_message = callback_get_log_message

    p_found = False
    p_path = TRUNK_BASE + pn
    try:
        fs = client.list(TRUNK_BASE)
        for (f,t) in fs:
            if str(f.kind) == 'dir' and f.path == p_path:
                p_found = True
                break
    except:
        return HttpResponse(json.dumps({'ret':998, 'msg':'项目查询异常'}))

    if not p_found:
        return HttpResponse(json.dumps({'ret':3, 'msg':'svn中不存在该项目'}))

    bp_son_found = False
    bp_path = BRANCH_BASE + pn + r'/'
    bp_son_path = bp_path + bn
    try:
        fs = client.list(bp_path)
        for (f,t) in fs:
            if str(f.kind) == 'dir' and f.path == bp_son_path:
                bp_son_found = True
                break 
    except:
        client.mkdir(bp_path, '');

    if bp_son_found:
        return HttpResponse(json.dumps({'ret':4, 'msg':'分支名已经存在'})) 


    try:
        client.copy(p_path, bp_son_path)
    except Exception,e:
        logger.error(e)
        return HttpResponse(json.dumps({'ret':999, 'msg':'创建分支异常'}))

    return HttpResponse(json.dumps({'ret':0}))














## 创建文件树SVN
## python递归实现目录树
## 递归函数 line 是文件的一行，dir_list 是列表
def CreateDirTree(line, dir_list):
    ## 切割，得到一个列表 dir_str
    dir_str = line.split('/')
    ## 判断行是否为目录
    if str(dir_str[-1]) == "":
        if len(dir_str) == 2:
#            dir_list.append({"id": str(dir_str[0]), "folder": "true", "text": str(dir_str[0]), "children": []})
             dir_list.append({"title": str(dir_str[0]), "expanded": "true", "folder": "true", "children": []})
        else:
            i = 0
            for dir_i in dir_list:
                if dir_i['title'] == dir_str[0]:
                    line_min = '/'.join(dir_str[1:])
                    dir_list_min = dir_list[i]['children']
                    break
                i = i + 1
            ## 如果多层目录，就递归
            CreateDirTree(line_min, dir_list_min)
    else:
        ## 文件处理
        if len(dir_str) == 1:
            dir_list.append({"title": str(dir_str[0])})
        else:
            i = 0
            for dir_i in dir_list:
                if dir_i['title'] == dir_str[0]:
                    line_min = '/'.join(dir_str[1:])
                    dir_list_min = dir_list[i]['children']
                    break
                i = i + 1
            ## 如果多层目录，就递归
            CreateDirTree(line_min, dir_list_min)

    return dir_list




alist = []

## 将list.txt 的内容全部读出来
with open("./list.txt", 'r') as lf:
    file = lf.readlines()

## 将读出的行 循环一行一行处理
for i in range(len(file)):
    line = file[i].replace('\n', '')
    alist = CreateDirTree(line, alist)
## 将结果写入到一个文件中
with open("./list.json", 'w') as lf:
    lf.writelines(str(alist))
    lf.close()

@login_required(login_url="/account/login/")
def ajax_get_data(request):
#     json_data = serializers.serialize("json", alist)
     json_data =  alist
     return HttpResponse(json.dumps(json_data),content_type="application/json")

logger = logging.getLogger('django')


# SVN views .
@login_required(login_url="/account/login/")
def svn_list(request):
#    svn_url=DJ_SETTINGs.SVN_URL
#    svn_user=DJ_SETTINGs.SVN_USER
#    svn_passwd=DJ_SETTINGs.SVN_PWD
#    os.system(svn list -R %svn_url >list.txt --username %svn_user --password %svn_passwd)

## 创建一个空列表

    """
    if request.method == 'GET' and 'q' in request.GET:
      question = request.GET['q']
      data = {"a": "a"}
       #ensure_ascii=False用于处理中文
       return HttpResponse(json.dumps(data, ensure_ascii=False))
       """

#    return HttpResponse(json.dumps(alist))

    return render(request, 'svn_wrapper/svn_list.html')


